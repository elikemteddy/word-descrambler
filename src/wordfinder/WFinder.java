/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package wordfinder;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Elikem
 */
public class WFinder extends javax.swing.JFrame {

    /**
     * Creates new form WFinder
     */
    public WFinder() {
        initComponents();
        this.getRootPane().setDefaultButton(btnDescramble);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPwords = new javax.swing.JTextArea();
        btnDescramble = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtScrambledWord = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Teasoft Word Descrambler");
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Scrambled Word: ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Possible Word(s)");

        txtPwords.setEditable(false);
        txtPwords.setColumns(20);
        txtPwords.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        txtPwords.setRows(5);
        txtPwords.setBorder(new javax.swing.border.MatteBorder(null));
        txtPwords.setMargin(new java.awt.Insets(20, 20, 2, 2));
        jScrollPane1.setViewportView(txtPwords);

        btnDescramble.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnDescramble.setText("Descramble");
        btnDescramble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescrambleActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wordfinder/teasoft.JPG"))); // NOI18N

        txtScrambledWord.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtScrambledWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtScrambledWordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDescramble))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                            .addComponent(txtScrambledWord))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(81, 81, 81))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtScrambledWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDescramble)
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDescrambleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescrambleActionPerformed
        String sword = txtScrambledWord.getText();
        sword = sword.trim();
        sword = sword.toUpperCase();
        if(sword.length() > 1){
            try {
                String[] swordArry = new String[sword.length()];
                int sizeOfSword = 0;
                for(int i = 0; i < sword.length(); i++){
                    swordArry[i] = String.valueOf(sword.charAt(i));
                    sizeOfSword += sword.codePointAt(i);
                } 
                 InputStream in = this.getClass().getClassLoader().getResourceAsStream("wordfinder/wordList.txt");
                 
                //fr = new FileReader();
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String line;
                boolean isCheck;
                ArrayList possibleWords = new ArrayList();
                while((line = br.readLine()) != null){
                    isCheck = true;
                    if(line.length() == swordArry.length){
                        for(int i = 0; i < swordArry.length; i++){
                            isCheck = isCheck && line.contains(swordArry[i]);
                        }
                        if(isCheck){
                            possibleWords.add(line);
                        }
                    }
                }  
               
                ArrayList finalList = new ArrayList();

            if(possibleWords.size() > 0){            
                for (int i = 0; i<possibleWords.size(); i++) {
                    int sizeOfPword = 0;
                    for(int j = 0; j < possibleWords.get(i).toString().length(); j++){
                        sizeOfPword += possibleWords.get(i).toString().codePointAt(j);        
                    }
                    if(sizeOfSword == sizeOfPword){
                        finalList.add(possibleWords.get(i));
                    }
                }
                
            } 
            String words = "";
            if(finalList.size() > 0){
                for(int i = 0; i<finalList.size(); i++){
                    words = words+finalList.get(i)+"\n";
                }
                txtPwords.setText(words);
            }else{
                txtPwords.setText("No Words found");
            }   br.close();
            } catch (FileNotFoundException ex) {
                //Logger.getLogger(WFinder.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex.toString());
            } catch (IOException ex) {
                //Logger.getLogger(WFinder.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex.toString());
            } finally {
            }
        }else
            JOptionPane.showMessageDialog(this, "Word length should be 2 or more", "Word Length Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnDescrambleActionPerformed

    private void txtScrambledWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtScrambledWordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtScrambledWordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WFinder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDescramble;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtPwords;
    private javax.swing.JTextField txtScrambledWord;
    // End of variables declaration//GEN-END:variables
}
